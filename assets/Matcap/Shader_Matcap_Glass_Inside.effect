// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }

        matcapSpecularTexture: {value: white, editor: {parent: USE_MAPCAP}}
        matcapSpecularColor: {value: [1,1,1,1],  editor: {type: color, parent: USE_MAPCAP}}
        matcapThicknessTexture: {value: white, editor: {parent: USE_MAPCAP}}
        matcapEdgeThickness: {value: 1.0, editor: {slide: true, range: [0.0, 10.0, 0.01], parent: USE_MAPCAP}}

        matcapRefTexture: {value: white, editor: {parent: USE_MAPCAP}}
        matcapRefIntensity: {value: 1.0, editor: {slide: true, range: [0.0, 1.0, 0.01], parent: USE_MAPCAP}}
         
  - name: transparent
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  #include <legacy/local-batch>
  #include <legacy/input-standard>
  #include <legacy/fog-vs>
  #include <legacy/shadow-map-vs>

  in vec4 a_color;
  #if HAS_SECOND_UV
    in vec2 a_texCoord1;
  #endif

  out vec3 v_position;
  out vec3 v_normal;
  out vec3 v_tangent;
  out vec3 v_bitangent;
  out vec2 v_uv;
  out vec2 v_uv1;
  out vec4 v_color;

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    vec4 pos = matWorld * In.position;

    v_position = pos.xyz;
    v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);
    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);
    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w; // note the cross order

    v_uv = a_texCoord;
    #if HAS_SECOND_UV
      v_uv1 = a_texCoord1;
    #endif
    v_color = a_color;

    CC_TRANSFER_FOG(pos);
    CC_TRANSFER_SHADOW(pos);

    return cc_matProj * (cc_matView * matWorld) * In.position;
  }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #include <legacy/fog-fs>

  in vec2 v_uv;
  in vec3 v_position;
  in vec3 v_normal;

  uniform sampler2D mainTexture;

  #if USE_MAPCAP
    uniform sampler2D matcapSpecularTexture;
    uniform sampler2D matcapThicknessTexture;
    uniform sampler2D matcapRefTexture;
  #endif

  uniform Constant {
    vec4 mainColor;
  };
  
  #if USE_MAPCAP
    uniform MatcapConstant{
      vec4 matcapSpecularColor;
      float matcapEdgeThickness;
      float matcapRefIntensity;
    };
  #endif

  vec4 frag () {
    vec4 col = texture(mainTexture, v_uv) * mainColor;

    #if USE_MAPCAP
      vec3 normalWorld = normalize(v_normal);
      vec3 normalView = normalize(cc_matView * vec4(normalWorld, 0.0)).xyz;
      vec2 matcapUV = (normalView.xy * 0.5) + 0.5;
      vec4 specularColor = texture(matcapSpecularTexture, matcapUV);

      //杯口和杯底厚度值
      float thickness = texture(matcapThicknessTexture, v_uv).r;
      //菲涅尔算侧面厚度
      vec3 viewWorld = normalize(v_position - cc_cameraPos.xyz);
      float fresnel = pow(1.0 - dot(normalWorld, -viewWorld), matcapEdgeThickness);
      
      thickness += fresnel;

      //折射(越厚的地方折射越大，uv偏移越大)
      vec3 refColor = texture(matcapRefTexture, matcapUV + fresnel * matcapRefIntensity).xyz;

      col.rgb = specularColor.rgb * matcapSpecularColor.rgb + col.rgb * refColor;

      //厚度越大，越不透明
      col.a = specularColor.r;
    #endif
    CC_APPLY_FOG(col, v_position);
    return CCFragOutput(col);
  }
}%
