// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html
//视差贴图
CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: legacy/main-functions/general-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        diffuseColor:   { value: [1, 1, 1, 1], editor: {type: color }}
        specularColor:  { value: [1, 1, 1, 1], editor: {type: color}}
        gloss:          { value: 8.0, editor: { slide: true, range:[ 8, 255, 1]}}

        normalTexture:    { value: normal, editor: {parent: USE_NORMAL_MAP } }
        normalStrength: { value: 1.0, editor: { parent: USE_NORMAL_MAP, slide: true, range: [0.0, 1.0, 0.1]}}

        specularTexture:    { value: white, editor: {parent: USE_SPECULAR_MAP } }

        depthTexture: { value: white }
        heightScale: { value: 0.05, editor: { slide: true, range: [0.0, 0.1, 0.01] }}
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>

  in vec2 v_uv;
  in vec2 v_uv1;
  in vec3 v_position;
  in vec3 v_normal;
  in vec3 v_tangent;
  in vec3 v_bitangent;

  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 mainColor;
    vec4 diffuseColor;
    vec4 specularColor;
    float gloss;
  };

  #if USE_NORMAL_MAP
    uniform sampler2D normalTexture;
    uniform ConstantNormalMap{
      float normalStrength;
    };
  #endif
  
  #if USE_SPECULAR_MAP
    uniform sampler2D specularTexture;
  #endif

  uniform sampler2D depthTexture;
  uniform ConstantParallaxMapping {
    float heightScale;
  };

  vec2 parallaxMapping(vec2 uv, vec3 viewDirTangent){
    float height = texture(depthTexture, uv).r;
    return uv - viewDirTangent.xy / viewDirTangent.z * height * heightScale;
  }

  vec2 steepParallaxMapping(vec2 uv, vec3 viewDirTangent){
    const int numLayers = 10;
    float layerDepth = 1.0 / float(numLayers);
    float curLayerDepth = 0.0;
    vec2 deltaUV = viewDirTangent.xy / viewDirTangent.z * heightScale / float(numLayers);
    vec2 curUV = uv;
    float curLayerDepthMap = texture(depthTexture, curUV).r;

    for(int i = 0; i < numLayers; i++){
      if(curLayerDepthMap <= curLayerDepth) 
        return curUV;

      curLayerDepth += layerDepth;
      curUV -= deltaUV;
      curLayerDepthMap = texture(depthTexture, curUV).r;
    }
    
    return curUV;
  }

  vec2 parallaxOcclusionMapping(vec2 uv, vec3 viewDirTangent){
    //陡峭视差映射
    const int numLayers = 10;
    float layerDepth = 1.0 / float(numLayers);
    float curLayerDepth = 0.0;
    vec2 deltaUV = viewDirTangent.xy / viewDirTangent.z * heightScale / float(numLayers);
    vec2 curUV = uv;
    float curLayerDepthMap = texture(depthTexture, curUV).r;

    for(int i = 0; i < numLayers; i++){
      if(curLayerDepthMap <= curLayerDepth) 
        return curUV;

      curLayerDepth += layerDepth;
      curUV -= deltaUV;
      curLayerDepthMap = texture(depthTexture, curUV).r;
    }

    //取上一级
    vec2 preUV = curUV + deltaUV;
    //获取当前与上一级深度比值
    float afterDepth = curLayerDepth - curLayerDepthMap;
    float preDepth = texture(depthTexture, preUV).r - (curLayerDepth - layerDepth);
    float weight = afterDepth / (preDepth + afterDepth);
    // curUV = mix(preUV, curUV, weight);
    curUV = preUV * weight + curUV * (1.0 - weight);
    return curUV;
  }
  
  vec4 frag () {
    vec2 finalUV = v_uv;
    vec3 normalWorld = normalize(v_normal);
    vec3 tangentWorld = normalize(v_tangent);
    vec3 bitangentWorld = normalize(v_bitangent);
    vec3 lightDirWolrd = normalize(-cc_mainLitDir.xyz);
    vec3 viewDirWorld = normalize(cc_cameraPos.xyz - v_position.xyz);
    vec3 halfDir = normalize(lightDirWolrd + viewDirWorld);
    mat3 matWorldTangent = mat3(tangentWorld, bitangentWorld, normalWorld);
    vec3 viewDirTangent = normalize(viewDirWorld * matWorldTangent);

    //视差贴图
    #if USE_PARALLAX_MAPPING
      finalUV = parallaxMapping(finalUV, viewDirTangent);
    #elif USE_STEEP_PARALLAX_MAPPING
      finalUV = steepParallaxMapping(finalUV, viewDirTangent);
    #elif USE_PARALLAX_OCCLUSION_MAPPING
      finalUV = parallaxOcclusionMapping(finalUV, viewDirTangent);
    #endif

    //法线贴图
    #if USE_NORMAL_MAP
      vec3 normalLocal = texture(normalTexture, finalUV).xyz * 2.0 - 1.0;
      vec3 normalMap =  normalize(matWorldTangent * normalLocal);
      vec3 normalFinal = mix(normalWorld, normalMap, normalStrength);
    #else
      vec3 normalFinal = normalWorld;
    #endif


    float nDotL = max(dot(normalFinal, lightDirWolrd), 0.0);
    float nDotH = max(dot(normalFinal, halfDir), 0.0);

    vec4 albedo = mainColor * texture(mainTexture, finalUV);

    vec3 ambient = cc_mainLitColor.rgb * cc_ambientSky.rgb * albedo.rgb;

    //漫反射 trick: 兰伯特因为暗部是黑色，过渡不自然，所以通过一个插值得到最终的diffuse，前半段为暗部颜色，后半段为亮部颜色
    // vec3 diffuse = cc_mainLitColor.rgb * diffuseColor.rgb * albedo.rgb * nDotL;
    vec3 diffuse = mix(cc_ambientSky.rgb * diffuseColor.rgb * albedo.rgb, cc_mainLitColor.rgb * diffuseColor.rgb * albedo.rgb, nDotL);
    
    //高光
    vec3 specular = cc_mainLitColor.rgb * specularColor.rgb * pow(nDotH, gloss);
    //trick: 高光时候，只有4%机率受漫反射影响
    // specular = mix(diffuse * specular, specular, gloss / 255.0);
    #if USE_SPECULAR_MAP
      //高光贴图
      vec4 specularMap = texture(specularTexture, finalUV);
      specular = specular * specularMap.rgb;
    #endif

    vec4 col = vec4(ambient + diffuse + specular, 1.0);
    return CCFragOutput(col);
  }
}%
