// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        diffuseColor:   { value: [1, 1, 1, 1], editor: {type: color }}
        specularColor:  { value: [1, 1, 1, 1], editor: {type: color}}
        gloss:          { value: 8.0, editor: { slide: true, range:[ 8, 255, 1]}}

        normalTexture:    { value: normal, editor: {parent: USE_NORMAL_MAP } }
        normalStrength: { value: 1.0, editor: { parent: USE_NORMAL_MAP, slide: true, range: [0.0, 1.0, 0.1]}}

        specularTexture:    { value: white, editor: {parent: USE_SPECULAR_MAP } }

        depthTexture:    { value: white, editor: { parent: USE_PARALLAX_MAP } }
        heightScale: { value: 0.05, editor: { parent: USE_PARALLAX_MAP, slide: true, range: [0.0, 0.1, 0.01] }}
  - name: transparent
    passes:
    - vert: unlit-vs:vert # builtin header
      frag: unlit-fs:frag
      blendState:
        targets:
        - blend: true
          blendSrc: src_alpha
          blendDst: one_minus_src_alpha
          blendSrcAlpha: src_alpha
          blendDstAlpha: one_minus_src_alpha
      properties: *props
}%

CCProgram unlit-vs %{
  precision highp float;
  #include <legacy/input-standard>
  #include <builtin/uniforms/cc-global>
  #include <legacy/local-batch>
  #include <legacy/input-standard>
  #include <legacy/shadow-map-vs>

  in vec4 a_color;
  out vec3 v_position;
  out vec3 v_normal;
  out vec3 v_tangent;
  out vec3 v_bitangent;
  out vec2 v_uv;
  out vec4 v_color;

  vec4 vert () {
    StandardVertInput In;
    CCVertInput(In);

    mat4 matWorld, matWorldIT;
    CCGetWorldMatrixFull(matWorld, matWorldIT);

    vec4 pos = matWorld * In.position;

    v_position = pos.xyz;
    v_normal = normalize((matWorldIT * vec4(In.normal, 0.0)).xyz);
    v_tangent = normalize((matWorld * vec4(In.tangent.xyz, 0.0)).xyz);
    v_bitangent = cross(v_normal, v_tangent) * In.tangent.w; // note the cross order

    v_uv = a_texCoord;
    v_color = a_color;

    CC_TRANSFER_SHADOW(pos);

    return cc_matProj * (cc_matView * matWorld) * In.position;
  }

}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>
  #include "../Common/Shaders/CommonLighting"

  vec4 frag () {
    vec4 col = CalcBlinnPhongLighting();

    return CCFragOutput(col);
  }
}%
