// Effect Syntax Guide: https://docs.cocos.com/creator/manual/zh/shader/index.html

CCEffect %{
  techniques:
  - name: opaque
    passes:
    - vert: legacy/main-functions/general-vs:vert # builtin header
      frag: unlit-fs:frag
      properties: &props
        mainTexture:    { value: white }
        mainColor:      { value: [1, 1, 1, 1], editor: { type: color } }
        diffuseColor:   { value: [1, 1, 1, 1], editor: { type: color } }
        specularColor:  { value: [1, 1, 1, 1], editor: { type: color } }
        gloss:   { value: 8, editor: { range: [8.0, 255.0, 1.0] } }
}%

CCProgram unlit-fs %{
  precision highp float;
  #include <legacy/output>

  in vec2 v_uv;
  in vec3 v_position;
  in vec3 v_normal;
  in vec3 v_tangent;
  in vec3 v_bitangent;

  uniform sampler2D mainTexture;

  uniform Constant {
    vec4 mainColor;
    vec4 diffuseColor;
    vec4 specularColor;
    float gloss;
  };

  vec4 frag () {
    vec4 albedo = mainColor * texture(mainTexture, v_uv);
    vec3 normalWorld = normalize(v_normal);
    vec3 lightDirWorld = normalize(-cc_mainLitDir.xyz);
    vec3 vewDirWorld = normalize(cc_cameraPos.xyz - v_position);
    float nDotL = max(dot(normalWorld, lightDirWorld), 0.0);
    vec3 halfDir = normalize(lightDirWorld + vewDirWorld);
    float nDotH = max(dot(normalWorld, halfDir), 0.0);
    vec3 ambient = cc_ambientSky.rgb * albedo.rgb * cc_mainLitColor.rgb;

    vec3 diffuse = cc_mainLitColor.rgb * diffuseColor.rgb * nDotL;

    vec3 specular = cc_mainLitColor.rgb * specularColor.rgb * pow(nDotH, gloss);

    vec4 col = vec4(ambient + diffuse + specular, 1.0);

    return CCFragOutput(col);
  }
}%
